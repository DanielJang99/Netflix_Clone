{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","url","isLarge","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","console","log","className","map","movie","key","id","onClick","movieTrailer","name","then","urlParams","URLSearchParams","URL","search","catch","error","alert","click","src","poster_path","backdrop_path","alt","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchTopRated","fetchComedy","fetchAdventure","fetchDocumentary","fetchNetflixOriginals","Banner","setMovie","style","backgroundSize","backgroundImage","backgroundPosition","overview","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.56ec4264.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\"\n});\n\nexport default instance;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport \"./Row.scss\";\nimport Youtube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\n\nconst imageURL = \"https://image.tmdb.org/t/p/original\";\n\nfunction Row({ title, url, isLarge }) {\n    const [movies, setMovies] = useState([]);\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n    useEffect(() => {\n        async function fetchData() {\n            const request = await axios.get(url);\n            setMovies(request.data.results);\n            return request;\n        }\n        fetchData();\n    }, [url]);\n    console.log(movies);\n\n    const opts = {\n        height: \"390\",\n        width: \"100%\",\n        playerVars: {\n            // https://developers.google.com/youtube/player_parameters\n            autoplay: 1\n        }\n    };\n\n    const click = movie => {\n        if (trailerUrl) {\n            setTrailerUrl(\"\");\n        } else {\n            movieTrailer(movie?.name || \"\")\n                .then(url => {\n                    const urlParams = new URLSearchParams(new URL(url).search);\n                    setTrailerUrl(urlParams.get(\"v\"));\n                })\n                .catch(error => {\n                    alert(\n                        \"Trailer for the movie is currently unavailable. Try clicking another movie\"\n                    );\n                });\n        }\n    };\n\n    return (\n        <div className=\"row\">\n            <h2>{title}</h2>\n            <div className=\"row posters\">\n                {movies.map(movie => (\n                    <img\n                        key={movie.id}\n                        onClick={() => click(movie)}\n                        className={`row poster ${isLarge && \"row largePoster\"}`}\n                        src={\n                            isLarge\n                                ? `${imageURL}${movie.poster_path}`\n                                : `${imageURL}${movie.backdrop_path}`\n                        }\n                        alt={movie.title}\n                    />\n                ))}\n            </div>\n            {trailerUrl && <Youtube videoId={trailerUrl} opts={opts} />}\n        </div>\n    );\n}\n\nexport default Row;\n","const API_KEY = \"47223dc77b02e3169fa9047461b75c36\";\n\nconst requests = {\n    fetchTrending: `/trending/all/day?api_key=${API_KEY}`,\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n    fetchComedy: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n    fetchAdventure: `/discover/movie?api_key=${API_KEY}&with_genres=12`,\n    fetchDocumentary: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`\n};\n\nexport default requests;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport requests from \"./requests\";\nimport \"./Banner.scss\";\n// import { url } from \"inspector\";\n\nfunction Banner() {\n    const imageURL = \"https://image.tmdb.org/t/p/original\";\n    const [movie, setMovie] = useState([]);\n\n    useEffect(() => {\n        async function fetchData() {\n            const request = await axios.get(requests.fetchNetflixOriginals);\n            setMovie(request.data.results[0]);\n            return request;\n        }\n        fetchData();\n    }, []);\n\n    console.log(movie);\n\n    return (\n        <header\n            className=\"banner\"\n            style={{\n                backgroundSize: \"cover\",\n                backgroundImage: `url(${imageURL}${movie.backdrop_path})`,\n                backgroundPosition: \"center center\"\n            }}\n        >\n            <div className=\"banner content\">\n                <h1 className=\"banner title\">{movie.title || movie.name}</h1>\n                <div className=\"banner buttons\">\n                    <button className=\"banner button\">Play</button>\n                    <button className=\"banner button\">List</button>\n                </div>\n                <h1 className=\"banner description\">{movie.overview}</h1>\n            </div>\n            <div className=\"banner fadeBottom\" />\n        </header>\n    );\n}\n\nexport default Banner;\n","import React, { useEffect, useState } from \"react\";\nimport \"./Nav.scss\";\n\nfunction Nav() {\n    const [show, handleShow] = useState(false);\n    useEffect(() => {\n        window.addEventListener(\"scroll\", () => {\n            if (window.scrollY > 100) {\n                handleShow(true);\n            } else {\n                handleShow(false);\n            }\n        });\n        return () => {\n            window.removeEventListener(\"scroll\");\n        };\n    }, []);\n\n    return (\n        <div className={`nav ${show && \"black\"}`}>\n            <img\n                className=\"nav logo\"\n                src=\"https://upload.wikimedia.org/wikipedia/commons/0/0f/Logo_Netflix.png\"\n                alt=\"Netflix Logo\"\n            />\n            <img\n                className=\"nav icon\"\n                src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\"\n                alt=\"Netflix Logo\"\n            />\n        </div>\n    );\n}\n\nexport default Nav;\n","import React from \"react\";\nimport \"./App.scss\";\nimport Row from \"./Row\";\nimport requests from \"./requests\";\nimport Banner from \"./Banner\";\nimport Nav from \"./Nav\";\n\nfunction App() {\n    return (\n        <div className=\"app\">\n            <Nav />\n            <Banner />\n            <Row\n                title=\"Netflix Originals\"\n                url={requests.fetchNetflixOriginals}\n                isLarge\n            />\n            <Row title=\"Trending Now\" url={requests.fetchTrending} />\n            <Row title=\"Top Rated\" url={requests.fetchTopRated} />\n            <Row title=\"Comedy\" url={requests.fetchComedy} />\n            <Row title=\"Adventure\" url={requests.fetchAdventure} />\n            <Row title=\"Documentary\" url={requests.fetchDocumentary} />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}