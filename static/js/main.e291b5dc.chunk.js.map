{"version":3,"sources":["axios.js","movies_action.jsx","CallYoutube.jsx","presentational/Row.js","containers/RowContainer.js","requests.js","navbar/SearchIcon.js","navbar/SearchInput.js","navbar/Nav.js","presentational/Banner.js","containers/BannerContainer.jsx","pages/Home.jsx","presentational/SearchRow.js","pages/Search.jsx","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","fetchMovies","RequestType","a","get","movies","LoadMovies","RequestURL","type","dispatch","e","initialState","TRENDING","data","loading","error","TOPRATED","COMEDY","ADVENTURE","NORIGINALS","handleAsync","key","SUCCESS","ERROR","state","action","CallYoutube","movieName","useState","trailerUrl","setTrailerUrl","videoId","opts","height","width","playerVars","autoplay","movieTrailer","then","url","urlParams","URLSearchParams","URL","search","catch","alert","Row","isLarge","title","setMovies","movieState","setMovieState","clicked","setClicked","useEffect","results","className","map","movie","id","onClick","movieTitle","name","src","poster_path","backdrop_path","alt","RowContainer","useSelector","useDispatch","console","log","API_KEY","requests","fetchTrending","fetchTopRated","fetchComedy","fetchAdventure","fetchNetflixOriginals","SearchIcon","style","stroke","fill","strokeWidth","d","SearchInput","query","setQuery","queryRef","useRef","history","useHistory","push","autoFocus","ref","onChange","current","value","placeholder","onKeyDown","event","keyCode","Nav","showIcon","show","handleShow","showBanner","window","scrollY","addEventListener","removeEventListener","paddingRight","Banner","setMovie","backgroundSize","backgroundImage","backgroundPosition","overview","BannerContainer","Home","SearchRow","rowNum","setRowNum","request","total_results","Math","floor","fetchData","gridTemplateRows","i","color","Search","location","SearchQuery","qs","parse","ignoreQueryPrefix","searchRequest","backgroundColor","App","path","exact","component","Boolean","hostname","match","store","createStore","composeWithDevTools","applyMiddleware","ReduxThunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.e291b5dc.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\"\n});\n\nexport default instance;\n","import axios from \"./axios\";\n\nconst GET_TRENDING = \"GET_TRENDING\";\nconst GET_TRENDING_SUCCESS = \"GET_TRENDING_SUCCESS\";\nconst GET_TRENDING_FAIL = \"GET_TRENDING_FAIL\";\n\nconst GET_TOPRATED = \"GET_TOPRATED\";\nconst GET_TOPRATED_SUCCESS = \"GET_TOPRATED_SUCCESS\";\nconst GET_TOPRATED_FAIL = \"GET_TOPRATED_FAIL\";\n\nconst GET_COMEDY = \"GET_COMEDY\";\nconst GET_COMEDY_SUCCESS = \"GET_COMEDY_SUCCESS\";\nconst GET_COMEDY_FAIL = \"GET_COMEDY_FAIL\";\n\nconst GET_ADVENTURE = \"GET_ADVENTURE\";\nconst GET_ADVENTURE_SUCCESS = \"GET_ADVENTURE_SUCCESS\";\nconst GET_ADVENTURE_FAIL = \"GET_ADVENTURE_FAIL\";\n\nconst GET_NORIGINALS = \"GET_NORIGINALS\";\nconst GET_NORIGINALS_SUCCESS = \"GET_NORIGINALS_SUCCESS\";\nconst GET_NORIGINALS_FAIL = \"GET_NORIGINALS_FAIL\";\n\nconst fetchMovies = async RequestType => {\n    const movies = await axios.get(RequestType);\n    return movies;\n};\n\nexport const LoadMovies = (RequestURL, type) => async dispatch => {\n    dispatch({ type: `GET_${type}` });\n    try {\n        const movies = await fetchMovies(RequestURL);\n        dispatch({ type: `GET_${type}_SUCCESS`, movies });\n    } catch (e) {\n        dispatch({ type: `GET_${type}_FAIL`, e });\n    }\n};\n\nconst initialState = {\n    TRENDING: {\n        data: null,\n        loading: false,\n        error: null\n    },\n    TOPRATED: {\n        data: null,\n        loading: false,\n        error: null\n    },\n    COMEDY: {\n        data: null,\n        loading: false,\n        error: null\n    },\n    ADVENTURE: {\n        data: null,\n        loading: false,\n        error: null\n    },\n    NORIGINALS: {\n        data: null,\n        loading: false,\n        error: null\n    }\n};\n\nexport const handleAsync = (type, key) => {\n    const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\n    return (state, action) => {\n        switch (action.type) {\n            case type:\n                return {\n                    ...state,\n                    [key]: {\n                        ...state,\n                        loading: true\n                    }\n                };\n            case SUCCESS:\n                return {\n                    ...state,\n                    [key]: {\n                        ...state,\n                        data: action.movies\n                    }\n                };\n            case ERROR:\n                return {\n                    ...state,\n                    [key]: {\n                        ...state,\n                        error: action.error\n                    }\n                };\n            default:\n                return state;\n        }\n    };\n};\n\nexport default function movieReducer(state = initialState, action) {\n    switch (action.type) {\n        case GET_TRENDING:\n        case GET_TRENDING_SUCCESS:\n        case GET_TRENDING_FAIL:\n            return handleAsync(GET_TRENDING, \"TRENDING\")(state, action);\n        case GET_TOPRATED:\n        case GET_TOPRATED_SUCCESS:\n        case GET_TOPRATED_FAIL:\n            return handleAsync(GET_TOPRATED, \"TOPRATED\")(state, action);\n        case GET_COMEDY:\n        case GET_COMEDY_SUCCESS:\n        case GET_COMEDY_FAIL:\n            return handleAsync(GET_COMEDY, \"COMEDY\")(state, action);\n        case GET_ADVENTURE:\n        case GET_ADVENTURE_SUCCESS:\n        case GET_ADVENTURE_FAIL:\n            return handleAsync(GET_ADVENTURE, \"ADVENTURE\")(state, action);\n        case GET_NORIGINALS:\n        case GET_NORIGINALS_SUCCESS:\n        case GET_NORIGINALS_FAIL:\n            return handleAsync(GET_NORIGINALS, \"NORIGINALS\")(state, action);\n        default:\n            return state;\n    }\n}\n","import React, { useState } from \"react\";\nimport Youtube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\n\nfunction CallYoutube({ movieName }) {\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n    const opts = {\n        height: \"390\",\n        width: \"100%\",\n        playerVars: {\n            // https://developers.google.com/youtube/player_parameters\n            autoplay: 1\n        }\n    };\n\n    if (trailerUrl) {\n        return <Youtube videoId={trailerUrl} opts={opts} />;\n    } else {\n        movieTrailer(movieName)\n            .then(url => {\n                const urlParams = new URLSearchParams(new URL(url).search);\n                setTrailerUrl(urlParams.get(\"v\"));\n            })\n            .catch(error => {\n                alert(\n                    \"Trailer for this movie is currently unavailable in movie-trailer api. Try clicking another movie\"\n                );\n            });\n    }\n\n    return null;\n}\n\nexport default CallYoutube;\n","import React, { useState, useEffect } from \"react\";\nimport \"../styles/Row.scss\";\nimport CallYoutube from \"../CallYoutube\";\n\nconst imageURL = \"https://image.tmdb.org/t/p/original\";\n\nfunction Row({ data, isLarge, title }) {\n    const [movies, setMovies] = useState([]);\n    const [movieState, setMovieState] = useState(\"\");\n    const [clicked, setClicked] = useState(false);\n\n    useEffect(() => {\n        setMovies(data.data.results);\n    }, [data]);\n\n    const click = movieTitle => {\n        setMovieState(movieTitle);\n        setClicked(!clicked);\n    };\n\n    return (\n        <div className=\"row\">\n            <h2 className=\"row titles\">{title}</h2>\n            <div className=\"row posters\">\n                {movies.map(movie => (\n                    <img\n                        key={movie.id}\n                        onClick={() => click(movie.title || movie.name)}\n                        className={`row poster ${isLarge && \"row largePoster\"}`}\n                        src={\n                            isLarge\n                                ? `${imageURL}${movie.poster_path}`\n                                : `${imageURL}${movie.backdrop_path}`\n                        }\n                        alt={movie.title}\n                    />\n                ))}\n            </div>\n            {movieState && clicked && <CallYoutube movieName={movieState} />}\n        </div>\n    );\n}\n\nexport default Row;\n","import React, { useEffect } from \"react\";\nimport { LoadMovies } from \"../movies_action\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Row from \"../presentational/Row\";\n\nfunction RowContainer({ url, title, isLarge, type }) {\n    const { data, loading, error } = useSelector(state => state[type]);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(LoadMovies(url, type));\n    }, [dispatch, url, type]);\n    if (!data) {\n        return null;\n    }\n    if (loading) {\n        console.log(\"loading\");\n    }\n    if (error) {\n        console.log(error);\n    }\n\n    return <Row data={data} isLarge={isLarge} title={title} />;\n}\n\nexport default RowContainer;\n","const API_KEY = \"47223dc77b02e3169fa9047461b75c36\";\n\nconst requests = {\n    fetchTrending: `/trending/all/day?api_key=${API_KEY}`,\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n    fetchComedy: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n    fetchAdventure: `/discover/movie?api_key=${API_KEY}&with_genres=12`,\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`\n};\n\nexport default requests;\n","import React from \"react\";\n\nfunction SearchIcon() {\n    return (\n        <>\n            <svg style={{ width: \"24\", height: \"24\" }}>\n                <path\n                    className=\"nav icon\"\n                    stroke=\"white\"\n                    fill=\"transparent\"\n                    strokeWidth=\"3\"\n                    d=\"M15,15 L22,22 L15,15 Z M9.5,17 C13.6421356,17 17,13.6421356 17,9.5 C17,5.35786438 13.6421356,2 9.5,2 C5.35786438,2 2,5.35786438 2,9.5 C2,13.6421356 5.35786438,17 9.5,17 Z\"\n                />\n            </svg>\n        </>\n    );\n}\n\nexport default SearchIcon;\n","import React, { useState, useRef, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction SearchInput() {\n    const [query, setQuery] = useState(\"\");\n    const queryRef = useRef();\n\n    let history = useHistory();\n\n    const getInput = () => {\n        setQuery(queryRef.current.value);\n    };\n\n    const handleEscape = event => {\n        if (event.keyCode === 27) {\n            history.push(\"/Netflix_Clone\");\n        }\n    };\n\n    useEffect(() => {\n        history.push(`/Netflix_Clone/search?query=${query}`);\n    }, [history, query]);\n\n    return (\n        <>\n            <input\n                autoFocus\n                type=\"text\"\n                ref={queryRef}\n                onChange={getInput}\n                placeholder={\"Press esc to exit\"}\n                onKeyDown={handleEscape}\n            />\n        </>\n    );\n}\n\nexport default SearchInput;\n","import React, { useEffect, useState } from \"react\";\nimport \"../styles/Nav.scss\";\nimport SearchIcon from \"./SearchIcon\";\nimport SearchInput from \"./SearchInput\";\n\nfunction Nav({ showIcon }) {\n    const [show, handleShow] = useState(false);\n    const [clicked, setClicked] = useState(false);\n\n    const toggle = () => {\n        setClicked(true);\n    };\n\n    useEffect(() => {\n        const showBanner = () => {\n            if (window.scrollY > 100) {\n                handleShow(true);\n            } else {\n                handleShow(false);\n            }\n        };\n        window.addEventListener(\"scroll\", () => showBanner());\n        return () => {\n            window.removeEventListener(\"scroll\", showBanner());\n        };\n    }, []);\n\n    return (\n        <div className={`nav ${(show || !showIcon) && \"black\"}`}>\n            <div>\n                <img\n                    className=\"nav logo\"\n                    src=\"https://upload.wikimedia.org/wikipedia/commons/0/0f/Logo_Netflix.png\"\n                    alt=\"Netflix Logo\"\n                />\n            </div>\n\n            <div style={{ paddingRight: \"3.125rem\" }}>\n                {clicked || !showIcon ? (\n                    <SearchInput />\n                ) : (\n                    <div onClick={() => toggle()}>\n                        <SearchIcon />\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default Nav;\n","import React, { useState, useEffect } from \"react\";\nimport \"../styles/Banner.scss\";\n\nfunction Banner({ data }) {\n    const imageURL = \"https://image.tmdb.org/t/p/original\";\n    const [movie, setMovie] = useState([]);\n\n    useEffect(() => {\n        setMovie(data.data.results[0]);\n    }, [data]);\n\n    return (\n        <header\n            className=\"banner\"\n            style={{\n                backgroundSize: \"cover\",\n                backgroundImage: `url(${imageURL}${movie.backdrop_path})`,\n                backgroundPosition: \"center center\"\n            }}\n        >\n            <div className=\"banner content\">\n                <h1 className=\"banner title\">{movie.title || movie.name}</h1>\n                <div className=\"banner buttons\">\n                    <button className=\"banner button\">Play</button>\n                    <button className=\"banner button\">List</button>\n                </div>\n                <h1 className=\"banner description\">{movie.overview}</h1>\n            </div>\n            <div className=\"banner fadeBottom\" />\n        </header>\n    );\n}\n\nexport default Banner;\n","import React, { useEffect } from \"react\";\nimport requests from \"../requests\";\nimport { LoadMovies } from \"../movies_action\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Banner from \"../presentational/Banner\";\n\nfunction BannerContainer() {\n    const { data, loading, error } = useSelector(state => state.TRENDING);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(LoadMovies(requests.fetchTrending, \"TRENDING\"));\n    }, [dispatch]);\n    if (!data) {\n        return null;\n    }\n    if (loading) {\n        console.log(\"loading\");\n    }\n\n    if (error) {\n        console.log(error);\n    }\n    return <Banner data={data} />;\n}\n\nexport default BannerContainer;\n","import React from \"react\";\nimport RowContainer from \"../containers/RowContainer\";\nimport requests from \"../requests\";\nimport Nav from \"../navbar/Nav\";\nimport BannerContainer from \"../containers/BannerContainer\";\nimport \"../styles/App.scss\";\n\nfunction Home() {\n    return (\n        <div className=\"app\">\n            <Nav showIcon={true} />\n            <BannerContainer />\n            <RowContainer\n                title=\"Netflix Originals\"\n                url={requests.fetchNetflixOriginals}\n                isLarge\n                type=\"NORIGINALS\"\n            />\n            <RowContainer\n                title=\"Trending Now\"\n                url={requests.fetchTrending}\n                type=\"TRENDING\"\n            />\n            <RowContainer\n                title=\"Top Rated\"\n                url={requests.fetchTopRated}\n                type=\"TOPRATED\"\n            />\n            <RowContainer\n                title=\"Comedy\"\n                url={requests.fetchComedy}\n                type=\"COMEDY\"\n            />\n            <RowContainer\n                title=\"Adventure\"\n                url={requests.fetchAdventure}\n                type=\"ADVENTURE\"\n            />\n        </div>\n    );\n}\n\nexport default Home;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"../axios\";\nimport \"../styles/SearchRow.scss\";\nimport CallYoutube from \"../CallYoutube\";\n\nconst imageURL = \"https://image.tmdb.org/t/p/original\";\n\nfunction SearchRow({ url }) {\n    const [movies, setMovies] = useState([]);\n    const [rowNum, setRowNum] = useState(0);\n\n    const [movieState, setMovieState] = useState(\"\");\n    const [clicked, setClicked] = useState(false);\n\n    useEffect(() => {\n        async function fetchData() {\n            const request = await axios.get(url);\n            setMovies(request.data.results);\n            request.data.total_results >= 20\n                ? setRowNum(5)\n                : setRowNum(Math.floor(request.data.total_results / 4) + 1);\n            return request;\n        }\n        fetchData();\n    }, [url]);\n\n    const click = (movieTitle, i) => {\n        setMovieState(movieTitle);\n        setClicked(!clicked);\n    };\n\n    while (\n        url !== \"/search/movie?api_key=47223dc77b02e3169fa9047461b75c36&query=\"\n    ) {\n        return (\n            <>\n                {movieState && clicked && (\n                    <CallYoutube movieName={movieState} />\n                )}\n\n                <div\n                    className=\"grid\"\n                    style={{\n                        gridTemplateRows: `repeat(${rowNum}, 12.5rem)`\n                    }}\n                >\n                    {movies.map((movie, i) => (\n                        <div>\n                            <img\n                                onClick={() =>\n                                    click(movie.title || movie.name, i)\n                                }\n                                key={i}\n                                src={`${imageURL}${movie.backdrop_path}`}\n                                alt={movie.title}\n                                className=\"poster\"\n                                style={{ color: \"white\" }}\n                            />\n                        </div>\n                    ))}\n                </div>\n            </>\n        );\n    }\n    return null;\n}\n\nexport default SearchRow;\n","import React from \"react\";\nimport Nav from \"../navbar/Nav\";\nimport qs from \"qs\";\nimport SearchRow from \"../presentational/SearchRow\";\n\nfunction Search({ location }) {\n    const SearchQuery = qs.parse(location.search, {\n        ignoreQueryPrefix: true\n    }).query;\n\n    console.log(\"loaded search\");\n\n    const searchRequest = `/search/movie?api_key=47223dc77b02e3169fa9047461b75c36&query=${SearchQuery}`;\n\n    return (\n        <div\n            className=\"app\"\n            style={{ backgroundColor: \"#111\", height: \"1100px\" }}\n        >\n            <Nav showIcon={false} />\n            <SearchRow url={searchRequest} />\n        </div>\n    );\n}\n\nexport default Search;\n","import React from \"react\";\n// import \"./App.scss\";\nimport Home from \"./pages/Home\";\nimport { Route } from \"react-router-dom\";\nimport Search from \"./pages/Search\";\n\nconst App = () => {\n    return (\n        <div>\n            <Route path=\"/Netflix_Clone\" exact component={Home} />\n            <Route path=\"/Netflix_Clone/search\" component={Search} />\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport movieReducer from \"./movies_action\";\nimport ReduxThunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nconst store = createStore(\n    movieReducer,\n    composeWithDevTools(applyMiddleware(ReduxThunk))\n);\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}